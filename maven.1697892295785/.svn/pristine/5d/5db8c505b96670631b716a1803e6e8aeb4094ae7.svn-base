package com.aashdit.lms.controller;

import java.io.File;
import java.io.FileInputStream;
import java.util.Base64;
import java.util.List;
import java.util.ResourceBundle;

import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.aashdit.framework.core.ServiceOutcome;
import com.aashdit.lms.dto.ApproveDto;
import com.aashdit.lms.model.LibraryCard;
import com.aashdit.lms.model.Member;
import com.aashdit.lms.model.TypeMember;
import com.aashdit.lms.service.CommonService;
import com.aashdit.lms.service.MemberService;
import com.aashdit.lms.utils.ApplicationConstants;
import com.aashdit.umt.model.User;
import com.aashdit.umt.util.SecurityHelper;

import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("/mst")
public class MemberController {
	
	
	ResourceBundle rb = ResourceBundle.getBundle("application");
	
	@Autowired
	private CommonService commonService;
	
	@Autowired
	private MemberService memberService ;
	
	
	
	@GetMapping("/add-member")
	public String addMember(Model model) {
		try {
			
			ServiceOutcome<List<TypeMember>> typeList=commonService.findByMeberCode(TypeMember.DCODE);
			model.addAttribute("typeListData", typeList.getData());
			
			model.addAttribute("genderList", commonService.getAllData("GENDER").getData());
		}
		catch (Exception e) {
			log.error("Exception occured in MasterController at addMember()==>"+e);
		}
		return "site.master.addmember";
	}
	
	
	@PostMapping("/save-member")
	public String saveMember(RedirectAttributes attr, Member mamber) {
		try {
			ServiceOutcome<String> schemeData= memberService.saveMember(mamber);
			attr.addFlashAttribute(schemeData.getOutcome() ? "success_msg" : "error_msg",schemeData.getMessage());
		} catch (Exception e) {
			log.error("Exception occured in MasterController at saveMember()==>"+e);
		}
		
		return "redirect:/mst/list-member";
	}
	
	
    @PostMapping("/edit-member")
    public String editMemaberData(RedirectAttributes attr,String mamberCode) {
    	try {
    		User user = SecurityHelper.getCurrentUser();
    	ServiceOutcome<Member> memaber= memberService.getMemeberListByMemberCode(mamberCode);
    	
    	attr.addFlashAttribute("roleCode",user.getPrimaryRole().getRoleCode());
    	attr.addFlashAttribute("mambermodule",ApplicationConstants.DocMember);
    	if(memaber.getOutcome()) {
			attr.addFlashAttribute("mamberData",memaber.getData());
		}else {
			attr.addFlashAttribute("error_msg",memaber.getMessage());
		}
    	}catch (Exception e) {
			log.error("Exception occured in MasterController at editMemaberData()==>"+e);
		}
    	return "redirect:/mst/add-member";
    }
	
	@GetMapping("/list-member")
	public String listMember(Model model) {
		try {
			ServiceOutcome<List<Member>> memberList =memberService.getMemberList(false);
			model.addAttribute("memberList", memberList.getData());
		} catch (Exception e) {
			log.error("Exception occured in MasterController at listMember()==>"+e);
		}
		return "site.master.listmember";
	}
	
	
	@GetMapping("/view-member")
	public String ViewMember(Model model) {
		try {
			
		}
		catch (Exception e) {
			log.error("Exception occured in MasterController at addMember()==>"+e);
		}
		return "site.master.viewmember";
	}
	
	
	 @PostMapping("/send-approve-member")
	    public String approveMemeber(Model model,ApproveDto approveDto) {
	    	try {
	    		User user = SecurityHelper.getCurrentUser();
	    	ServiceOutcome<LibraryCard> libryCradData= memberService.getMemebeByMemberCodeFOrApproval(approveDto);
	    	
	    	model.addAttribute("roleCode",user.getPrimaryRole().getRoleCode());
	    	model.addAttribute("mambermodule",ApplicationConstants.DocMember);
	    	if(libryCradData.getOutcome()) {
	    		model.addAttribute("pntData",libryCradData.getData());
	    		 String upLoadImg =	libryCradData.getData().getBarcode();
	    		 try {
	    			 File img = new File(upLoadImg);
				        FileInputStream fileInputStream = new FileInputStream(img);
				        byte[] imageBytes = IOUtils.toByteArray(fileInputStream);
				        fileInputStream.close(); 
				        String base64Image = Base64.getEncoder().encodeToString(imageBytes);
				    	model.addAttribute("base64Image",base64Image);
	    		 }
			        catch(Exception e){
			        	log.error("exception===>"+e);
			        }
				System.out.println("mamberCardData: " + libryCradData.getData());
			}else {
				model.addAttribute("error_msg",libryCradData.getMessage());
			}
	    	}catch (Exception e) {
				log.error("Exception occured in MasterController at approveMemeber()==>"+e);
			}
	    	return "site.library.cardgen";
	    }
		

}
