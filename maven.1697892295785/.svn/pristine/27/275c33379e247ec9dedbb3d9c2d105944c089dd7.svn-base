package com.aashdit.lms.service;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.stream.Collectors;

import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;

import com.aashdit.framework.core.ServiceOutcome;
import com.aashdit.framework.core.util.RandomString;
import com.aashdit.lms.VO.BookCatalogVO;
import com.aashdit.lms.VO.BookDtls;
import com.aashdit.lms.VO.BookVO;
import com.aashdit.lms.VO.LibraryDtls;
import com.aashdit.lms.VO.LibrarySectionVO;
import com.aashdit.lms.VO.LibraryVO;
import com.aashdit.lms.VO.PublisherDtls;
import com.aashdit.lms.VO.PublisherVO;
import com.aashdit.lms.VO.RackDtls;
import com.aashdit.lms.VO.ShelfDtls;
import com.aashdit.lms.VO.ShelfVO;
import com.aashdit.lms.model.Author;
import com.aashdit.lms.model.Book;
import com.aashdit.lms.model.BookCatalog;
import com.aashdit.lms.model.Category;
import com.aashdit.lms.model.Gender;
import com.aashdit.lms.model.Librarian;
import com.aashdit.lms.model.Library;
import com.aashdit.lms.model.LibraryCard;
import com.aashdit.lms.model.LibraryCard;
import com.aashdit.lms.model.LibrarySection;
import com.aashdit.lms.model.Member;
import com.aashdit.lms.model.Publisher;
import com.aashdit.lms.model.Shelf;
import com.aashdit.lms.model.Rack;
import com.aashdit.lms.model.SubCategory;
import com.aashdit.lms.repository.AuthorRepository;
import com.aashdit.lms.repository.BookCatalogRepository;
import com.aashdit.lms.repository.BookRepository;
import com.aashdit.lms.repository.CategoryRepository;
import com.aashdit.lms.repository.GenderRepository;
import com.aashdit.lms.repository.LibrarianRepository;
import com.aashdit.lms.repository.LibraryCardHistoryRepository;
import com.aashdit.lms.repository.LibraryCardRepository;
import com.aashdit.lms.repository.LibraryRepository;
import com.aashdit.lms.repository.LibrarySectionRepository;
import com.aashdit.lms.repository.MemberRepository;
import com.aashdit.lms.repository.PublisherRepository;
import com.aashdit.lms.repository.ShelfRepository;
import com.aashdit.lms.repository.RackRepository;
import com.aashdit.lms.repository.SubCategoryRepository;
import com.aashdit.lms.utils.ApplicationConstants;
import com.aashdit.lms.utils.CommonUploadFile;
import com.aashdit.lms.utils.QrCodeGenrator;
import com.aashdit.lms.utils.RandomNumberGenerate;
import com.aashdit.umt.model.Role;
import com.aashdit.umt.model.RoleRightLevelMaster;
import com.aashdit.umt.model.User;
import com.aashdit.umt.model.UserRoleMap;
import com.aashdit.umt.repository.RoleRepository;
import com.aashdit.umt.repository.RoleRightLevelMasterRepository;
import com.aashdit.umt.repository.UserRepository;
import com.aashdit.umt.repository.UserRoleMapRepository;
import com.aashdit.umt.service.AccessService;
import com.aashdit.umt.util.SecurityHelper;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class MasterServiceImplementation implements MasterService {
	
	
	@Autowired
	private MemberRepository memberRepository;
	
	@Autowired
	private LibraryRepository libRepository;
	
	@Autowired
	private GenderRepository genderRepository;
	
	@Autowired
	private LibrarySectionRepository libSectionRepository;
	
	@Autowired
	private CategoryRepository categoryRepository;
	
	@Autowired
	private SubCategoryRepository subCategoryRepository;
	
	@Autowired
	private ShelfRepository shelfRepository;
	
	@Autowired
	private RackRepository rackRepository;
	
	@Autowired
	private LibraryCardRepository libraryCardRepository;
	
	@Autowired
	private LibraryCardHistoryRepository libraryCardHistoryRepository;
	
	@Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;
	
	@Autowired
	private RoleRepository roleRepository;
	

	@Autowired
	private PublisherRepository publisherRepository;
	
	@Autowired
	private UserRoleMapRepository userRoleMapRepository;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private RoleRightLevelMasterRepository roleRightLevelMasterRepository;
	
	@Autowired
	private AccessService accessService;
	
	@Autowired
	private BookRepository bookRepository;
	
	@Autowired
	private BookCatalogRepository bookCatalogRepository;
	
	@Autowired
	private AuthorRepository authorRepo;
	
	@Autowired
	private LibrarianRepository librarianRepo;
	
	ResourceBundle rb = ResourceBundle.getBundle("application");

	
	@Override
	public ServiceOutcome<LibraryDtls> manageLib(LibraryDtls libraryDtls) {
		ServiceOutcome<LibraryDtls> soc = new ServiceOutcome<LibraryDtls>();
		User user = SecurityHelper.getCurrentUser();
		Random rand = new Random();
		try {
			Library lib = Optional.ofNullable(libraryDtls.getLibraryVO().getLibId())
			        .flatMap(libRepository::findById)
			        .map(existingLib->{
			        	BeanUtils.copyProperties(libraryDtls.getLibraryVO(), existingLib);
			        	existingLib.setLastUpdatedBy(user);
			        	existingLib.setLastUpdatedOn(new Date());
			        	existingLib.setIsActive(true);
			        	return existingLib;
			        }).orElseGet(()->{
			        	Library newLibrary = new Library();
			        	BeanUtils.copyProperties(libraryDtls.getLibraryVO(), newLibrary);
			        	String libCode = "LIB_" + rand.ints(48, 100)
  				        .filter(num -> (num < 58 || num > 64) && (num < 91 || num > 96))
  				        .limit(6)
  				        .mapToObj(c -> (char) c)
  				        .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
  				        .toString();
			        	newLibrary.setLibCode(libCode);
			        	newLibrary.setLastUpdatedBy(user);
			        	newLibrary.setLastUpdatedOn(new Date());
			        	return newLibrary;
			        });
			lib.setIsActive(true);
			libRepository.save(lib);
			
			soc.setMessage(Optional.ofNullable(libraryDtls.getLibraryVO().getLibId()).isPresent() ? "Library Updated" : "Library Added");
			soc.setOutcome(true);
			
		} catch (Exception e) {
			log.error("Exception occured in getting manageLib in MasterServiceImpl-->", e);
			soc.setMessage("Unable to process");
			soc.setOutcome(false);
		}
		return soc;
	}

	@Override
	public ServiceOutcome<LibraryDtls> getLibByCode(String libCode) {
	    ServiceOutcome<LibraryDtls> soc = new ServiceOutcome<>();
	    LibraryDtls libraryDtls = new LibraryDtls();
	    LibraryVO libraryVO = new LibraryVO();
	    try {
	        if (libCode != null) {
	            Optional<Library> libraryOptional = libRepository.findByLibCode(libCode);
	            if (libraryOptional.isPresent()) {
	                Library library = libraryOptional.get();
	                BeanUtils.copyProperties(library, libraryVO);
	                libraryDtls.setLibraryVO(libraryVO);
	                
	                soc.setOutcome(true);
	                soc.setMessage("Library found successfully");
	                soc.setData(libraryDtls);
	            } else {
	                soc.setOutcome(false);
	                soc.setMessage("Library not found for libCode: " + libCode);
	            }
	        } else {
	            soc.setOutcome(false);
	            soc.setMessage("libCode is null");
	        }
	    } catch (Exception e) {
	        log.error("Exception occurred in getLibByCode in MasterServiceImpl-->", e);
	        soc.setOutcome(false);
	        soc.setMessage("Unable to process");
	    }
	    return soc;
	}

	@Override
	public ServiceOutcome<LibraryDtls> manageLibSection(LibraryDtls libraryDtls) {
		ServiceOutcome<LibraryDtls> soc = new ServiceOutcome<>();
	    User user = SecurityHelper.getCurrentUser();
	    Random rand = new Random();
		try {
			
			if(libraryDtls.getLibId().size()>0) {
				
				libraryDtls.getLibId().forEach(libId->{
					List<Long> libSectionIds = libSectionRepository.findAllByLibraryLibIdAndIsActive(libId, true).stream()
					                                                                  .map(LibrarySection::getSecId)
					                                                                  .collect(Collectors.toList());
					List<Long> existinglibSectionIds = new ArrayList<>();
					libraryDtls.getLibrarySectionVOList().forEach(section->{
						if (section.getSecName() == null) {
							return;
						}
						if(libSectionIds.contains(section.getSecId())) {
							Optional<LibrarySection> findBySecId = libSectionRepository.findBySecId(section.getSecId());
							
							if(findBySecId.isPresent()) {
								BeanUtils.copyProperties(section, findBySecId.get());
								findBySecId.get().setLibrary(libRepository.findById(libId).get());
								findBySecId.get().setIsActive(true);
								findBySecId.get().setLastUpdatedBy(user);
								findBySecId.get().setLastUpdatedOn(new Date());
								libSectionRepository.save(findBySecId.get());
								existinglibSectionIds.add(section.getSecId());
							}else {
								LibrarySection newlibSection = new LibrarySection();
								BeanUtils.copyProperties(section, newlibSection);
								String secCode = "SEC_" + rand.ints(48, 100)
							        .filter(num -> (num < 58 || num > 64) && (num < 91 || num > 96))
							        .limit(6)
							        .mapToObj(c -> (char) c)
							        .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
							        .toString();
								newlibSection.setSecCode(secCode);
								newlibSection.setLibrary(libRepository.findById(libId).get());
								newlibSection.setIsActive(true);
								newlibSection.setCreatedBy(user);
								newlibSection.setCreatedOn(new Date());
								libSectionRepository.save(newlibSection);
							}
							
						}else {
							LibrarySection newlibSection = new LibrarySection();
							BeanUtils.copyProperties(section, newlibSection);
							String secCode = "SEC_" + rand.ints(48, 100)
						        .filter(num -> (num < 58 || num > 64) && (num < 91 || num > 96))
						        .limit(6)
						        .mapToObj(c -> (char) c)
						        .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
						        .toString();
							newlibSection.setSecCode(secCode);
							newlibSection.setLibrary(libRepository.findById(libId).get());
							newlibSection.setIsActive(true);
							newlibSection.setCreatedBy(user);
							newlibSection.setCreatedOn(new Date());
							libSectionRepository.save(newlibSection);
						}
					});
					
					libSectionIds.removeAll(existinglibSectionIds);
					
					libSectionIds.forEach(ixistingSection->{
						Optional<LibrarySection> findById = libSectionRepository.findById(ixistingSection);
						findById.get().setIsActive(false);
						libSectionRepository.save(findById.get());
					});
				});
			}
			
			/*
			 * libraryDtls.getLibId().forEach(lib->{
			 * libraryDtls.getLibrarySectionVOList().forEach(libSection->{
			 * 
			 * }); });
			 */
			
			soc.setMessage(null);
			
		} catch (Exception e) {
			 log.error("Exception occurred in manageLibSection in MasterServiceImpl-->", e);
		     soc.setOutcome(false);
		     soc.setMessage("Unable to process");
		}
		return soc;
	}

	@Override
	public ServiceOutcome<LibraryDtls> getLibSectionbylibId(Long libId) {
		ServiceOutcome<LibraryDtls> soc = new ServiceOutcome<>();
		LibraryDtls libraryDtls = new LibraryDtls();
		List<LibrarySectionVO> librarySectionVOList = new ArrayList<>();
		try {
			
			if (libId != null) {
	            List<LibrarySection> findByLibId = libSectionRepository.findAllByLibraryLibIdAndIsActive(libId, true);
	            if (findByLibId.size() > 0) {
	            	
	            	findByLibId.forEach(libSection->{
	            		LibrarySectionVO librarySecVO = new LibrarySectionVO();
	            		BeanUtils.copyProperties(libSection, librarySecVO);
	            		librarySectionVOList.add(librarySecVO);
	            	});
	            	
	            	libraryDtls.setLibrarySectionVOList(librarySectionVOList);
	                soc.setOutcome(true);
	                soc.setMessage("LibrarySection  found successfully");
	                soc.setData(libraryDtls);
	            } else {
	                soc.setOutcome(false);
	                soc.setMessage("LibrarySection not found for SectionCode: " + libId);
	            }
	        } else {
	            soc.setOutcome(false);
	            soc.setMessage("SectionCode is null");
	        }
			
		} catch (Exception e) {
			log.error("Exception occurred in getLibSectionbySectionCode in MasterServiceImpl-->", e);
		     soc.setOutcome(false);
		     soc.setMessage("Unable to process");
		}
		return soc;
	}
	

	@Override
	public ServiceOutcome<String> saveCategoryData(Category category) {
		ServiceOutcome<String> srvc = new ServiceOutcome<>();
		String message="";
		try {
			Category categoryData=null;
			if(category.getCategoryId() != null) {
				categoryData= categoryRepository.findById(category.getCategoryId()).get();
				message = "Category Updated Successfully"; 
			}else {
					RandomString rs = new RandomString(8);
					categoryData = new Category();
					categoryData.setCategoryCode(rs.nextString());
					message = "Category Saved Successfully";
				}
			categoryData.setCategoryName(category.getCategoryName());
			categoryData.setCategoryDescription(category.getCategoryDescription());
			if(!category.getCategoryImage().isEmpty()) {
				String imageName = FilenameUtils.getBaseName(category.getCategoryImage().getOriginalFilename());
				categoryData.setCategoryImagePath(CommonUploadFile.upload(category.getCategoryImage(), rb.getString("UPLOAD.FILE.PATH"), "CATEGORY", imageName));
			}
			categoryRepository.save(categoryData);
			srvc.setMessage(message);
		    srvc.setOutcome(true);
		} catch (Exception e) {
			log.error("Exception occured in saveCategoryData method in MasterServiceImpl-->", e);
			srvc.setMessage("Something went wrong please try again");
			srvc.setOutcome(false);
		}
		
		return srvc;
	}
	
	@Override
	public ServiceOutcome<String> activeInactiveCategory(Long categoryId, Boolean status) {
		ServiceOutcome<String> srvc = new ServiceOutcome<>();
		String message="";
		boolean flag=true;
		try {
			if(Optional.ofNullable(categoryId).isPresent()) {
				Category category = categoryRepository.findByCategoryId(categoryId);
				if(Optional.ofNullable(category).isPresent()) {
					category.setIsActive(status);
					categoryRepository.save(category);
				}
				if(status == true) {
					message="Category Activated Successfully";
				}else {
					flag=false;
					message="Category De-Activated Successfully";
				}
			}
		} catch (Exception e) {
			log.error("Exception occured in activeInactiveCategory method in MasterServiceImpl-->", e);
			message="Something went wrong please try again";
			flag=false;
		}
		srvc.setOutcome(flag);
		srvc.setMessage(message);
		return srvc;
	}
	
	@Override
	public ServiceOutcome<Category> findCategoryDataByCategoryId(Long categoryId) {
		ServiceOutcome<Category> srvc = new ServiceOutcome<>();
		String message="";
		Boolean flag=true;
		Category category = new Category();
		try {
			if(Optional.ofNullable(categoryId).isPresent()) {
				category = categoryRepository.findByCategoryId(categoryId);
			}else {
				message="Category Not Found";
				flag=false;
			}
			srvc.setData(category);
		} catch (Exception e) {
			log.error("Exception occured in findCategoryDataByCategoryId method in MasterServiceImpl-->", e);
			message="Something went wrong please try again";
			flag=false;	
		}
		srvc.setOutcome(flag);
		srvc.setMessage(message);
		return srvc;
	}

	@Override
	public ServiceOutcome<List<Category>> getCategoryList(boolean b) {
		ServiceOutcome<List<Category>> outcome = new ServiceOutcome<>();
		List<Category> categoryList = new ArrayList<>();
		try {
			if(b) {
				categoryList = categoryRepository.findAllByIsActiveTrueOrderByCategoryId();
			}else {
				categoryList = categoryRepository.findAll();
			}
			outcome.setData(categoryList);
		} catch (Exception e) {
			outcome.setOutcome(false);
			log.error("Exception occured in getCategoryList method in MasterServiceImpl-->", e);
		}
		return outcome;
	}
	

	@Override
	public ServiceOutcome<String> saveSubCategoryData(SubCategory subCategory, Long categoryId, String keywords) {
		ServiceOutcome<String> srvc = new ServiceOutcome<>();
		String message="";
		try {
			SubCategory subCategoryData=null;
			if(subCategory.getSubCategoryId() != null) {
				subCategoryData= subCategoryRepository.findById(subCategory.getSubCategoryId()).get();
				message = "Sub-Category Updated Successfully"; 
			}else {
					RandomString rs = new RandomString(8);
					subCategoryData = new SubCategory();
					subCategoryData.setSubCategoryCode(rs.nextString());
					message = "Sub-Category Saved Successfully";
				}
			subCategoryData.setSubCategoryName(subCategory.getSubCategoryName());
			subCategoryData.setCategory(categoryRepository.findByCategoryId(categoryId));
			subCategoryData.setSubCategoryDescription(subCategory.getSubCategoryDescription());
			subCategoryData.setKeywords(keywords);
			if(!subCategory.getSubCategoryImage().isEmpty()) {
				String imageName = FilenameUtils.getBaseName(subCategory.getSubCategoryImage().getOriginalFilename());
				subCategoryData.setSubCategoryImagePath(CommonUploadFile.upload(subCategory.getSubCategoryImage(), rb.getString("UPLOAD.FILE.PATH"), "SUBCATEGORY", imageName));
			}
			subCategoryData.setKeywords(subCategory.getKeywords());
			subCategoryRepository.save(subCategoryData);
			srvc.setMessage(message);
		    srvc.setOutcome(true);
		} catch (Exception e) {
			log.error("Exception occured in saveSubCategoryData method in MasterServiceImpl-->", e);
			srvc.setMessage("Something went wrong please try again");
			srvc.setOutcome(false);
		}
		
		return srvc;
	}
	
	@Override
	public ServiceOutcome<SubCategory> findSubCategoryDataBySubCategoryId(Long subCategoryId) {
		ServiceOutcome<SubCategory> srvc = new ServiceOutcome<>();
		String message="";
		Boolean flag=true;
		SubCategory subCategory = new SubCategory();
		try {
			if(Optional.ofNullable(subCategoryId).isPresent()) {
				subCategory = subCategoryRepository.findBySubCategoryId(subCategoryId);
			}else {
				message="Sub-Category Not Found";
				flag=false;
			}
			srvc.setData(subCategory);
		} catch (Exception e) {
			log.error("Exception occured in findSubCategoryDataBySubCategoryId method in MasterServiceImpl-->", e);
			message="Something went wrong please try again";
			flag=false;	
		}
		srvc.setOutcome(flag);
		srvc.setMessage(message);
		return srvc;
	}
	
	@Override
	public ServiceOutcome<String> activeInactiveSubCategory(Long subCategoryId, Boolean status) {
		ServiceOutcome<String> srvc = new ServiceOutcome<>();
		String message="";
		boolean flag=true;
		try {
			if(Optional.ofNullable(subCategoryId).isPresent()) {
				SubCategory subCategory = subCategoryRepository.findBySubCategoryId(subCategoryId);
				if(Optional.ofNullable(subCategory).isPresent()) {
					subCategory.setIsActive(status);
					subCategoryRepository.save(subCategory);
				}
				if(status == true) {
					message="Sub-Category Activated Successfully";
				}else {
					flag=false;
					message="Sub-Category De-Activated Successfully";
				}
			}
		} catch (Exception e) {
			log.error("Exception occured in activeInactiveSubCategory method in MasterServiceImpl-->", e);
			message="Something went wrong please try again";
			flag=false;
		}
		srvc.setOutcome(flag);
		srvc.setMessage(message);
		return srvc;
	}

	@Override
	public ServiceOutcome<List<SubCategory>> getSubCategoryList(boolean b) {
		ServiceOutcome<List<SubCategory>> outcome = new ServiceOutcome<>();
		List<SubCategory> subCategoryList = new ArrayList<>();
		try {
			if(b) {
				subCategoryList = subCategoryRepository.findAllByIsActiveTrueOrderBySubCategoryId();
			}else {
				subCategoryList = subCategoryRepository.findAll();
			}
			outcome.setData(subCategoryList);
		} catch (Exception e) {
			outcome.setOutcome(false);
			log.error("Exception occured in getSubCategoryList method in MasterServiceImpl-->", e);
		}
		return outcome;
	}

	@Override
	public ServiceOutcome<RackDtls> addAndUpdateRack(RackDtls rackDtls) {
		ServiceOutcome<RackDtls> soc = new ServiceOutcome<RackDtls>();
		Random rand = new Random();
		User user = SecurityHelper.getCurrentUser();
		try {
			
			rackDtls.getRackVOList().forEach(rack->{
				if (rack.getRackName() == null) {
					return;
				}
				if(Optional.ofNullable(rack.getRackId()).isPresent()) {
					Optional<Rack> findById = rackRepository.findById(rack.getRackId());
					if(findById.isPresent()) {
						BeanUtils.copyProperties(rack, findById.get(), "isActive");
						findById.get().setLastUpdatedBy(user);
						findById.get().setLastUpdatedOn(new Date());
						rackRepository.save(findById.get());
					}
				}else {
					Rack newRack = new Rack();
					BeanUtils.copyProperties(rack, newRack);
					String rackCode = "RACK_" + rand.ints(48, 100)
			        .filter(num -> (num < 58 || num > 64) && (num < 91 || num > 96))
			        .limit(6)
			        .mapToObj(c -> (char) c)
			        .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
			        .toString();
					newRack.setRackCode(rackCode);
					newRack.setIsActive(true);
					newRack.setCreatedBy(user);
					newRack.setCreatedOn(new Date());
					rackRepository.save(newRack);
				}
				
				
			});
			
			soc.setOutcome(true);
		} catch (Exception e) {
			log.error("Exception occured in addAndUpdateRack method in MasterServiceImpl-->", e);
			soc.setMessage("Unable to process");
			soc.setOutcome(false);
		}
		return soc;
	}

	@Override
	public ServiceOutcome<RackDtls> activeInactiveRack(RackDtls rackDtls) {
		ServiceOutcome<RackDtls> soc = new ServiceOutcome<RackDtls>();
		User user = SecurityHelper.getCurrentUser();
        try {
        	Optional<Rack> findById = rackRepository.findByRackCode(rackDtls.getRackVO().getRackCode());
        	if(findById.isPresent()) {
        		findById.get().setIsActive(rackDtls.getRackVO().getIsActive() ? false : true);
        		findById.get().setLastUpdatedBy(user);
        		findById.get().setLastUpdatedOn(new Date());
        		rackRepository.save(findById.get());
        	}
        	soc.setMessage("success");
			soc.setOutcome(true);
		} catch (Exception e) {
			log.error("Exception occured in activeInactiveRack method in MasterServiceImpl-->", e);
			soc.setMessage("error");
			soc.setOutcome(false);
		}
		return soc;
	}
	
	
	@Override
	public ServiceOutcome<String> saveShelfData(ShelfDtls shelf) {
		ServiceOutcome<String> srvc = new ServiceOutcome<>();
		String message="";
		try {
			Optional<Rack> findById = rackRepository.findById(shelf.getRackId());
			shelf.getShelfVOList().forEach(shelfId ->{
				if (shelfId.getShelfName() == null) {
					return;
				}
				if(shelfId.getShelfId()!= null) {
					Optional<Shelf> findById2 = shelfRepository.findById(shelfId.getShelfId());
					if(findById2.isPresent()) {
						BeanUtils.copyProperties(shelfId, findById2.get());
						findById2.get().setIsActive(true);
						findById2.get().setRack(findById.get());
						shelfRepository.save(findById2.get());
					}
				}
				else {
					Shelf  newShelf = new Shelf();
					BeanUtils.copyProperties(shelfId, newShelf);
					newShelf.setRack(findById.get());
					RandomString rs = new RandomString(8);
					newShelf.setShelfCode(rs.nextString());
					newShelf.setIsActive(true);
					shelfRepository.save(newShelf);
				}
				
			});
		} catch (Exception e) {
			log.error("Exception occured in saveShelfData method in MasterServiceImpl-->", e);
			srvc.setMessage("Something went wrong please try again");
			srvc.setOutcome(false);
		}
		
		return srvc;
	}

	
	@Override
	public ServiceOutcome<ShelfDtls> getAllShelfByRackId(Long rackId) {
		ServiceOutcome<ShelfDtls> srvc = new ServiceOutcome<>();
		ShelfDtls shelfDtls = new ShelfDtls();
		List<ShelfVO> shelfVoList = new ArrayList<>();
		try {
			List<Shelf> findAllRackRackId = shelfRepository.findAllByRackRackId(rackId);
			if(findAllRackRackId.size()>0) {
				findAllRackRackId.forEach(shelf->{
					ShelfVO shelfVO = new ShelfVO();
					BeanUtils.copyProperties(shelf, shelfVO);
					shelfVoList.add(shelfVO);
				});
			}
			shelfDtls.setShelfVOList(shelfVoList);
			srvc.setData(shelfDtls);
		} catch (Exception e) {
			log.error("Exception occured in getAllShelfByRackId method in MasterServiceImpl-->", e);
			srvc.setMessage("Something went wrong please try again");
			srvc.setOutcome(false);
		}
		return srvc;
	}
	
	@Override
	public ServiceOutcome<String> activeInactiveShelf(Long shelfId, Boolean status) {
		ServiceOutcome<String> srvc = new ServiceOutcome<>();
		String message="";
		boolean flag=true;
		try {
			if(Optional.ofNullable(shelfId).isPresent()) {
				Shelf shelf = shelfRepository.findByShelfId(shelfId);
				if(Optional.ofNullable(shelf).isPresent()) {
					shelf.setIsActive(status);
					shelfRepository.save(shelf);
				}
				if(status == true) {
					message="Shelf Activated Successfully";
				}else {
					flag=false;
					message="Shelf De-Activated Successfully";
				}
			}
		} catch (Exception e) {
			log.error("Exception occured in activeInactiveShelf method in MasterServiceImpl-->", e);
			message="Something went wrong please try again";
			flag=false;
		}
		srvc.setOutcome(flag);
		srvc.setMessage(message);
		return srvc;
	}


	@Override
	public ServiceOutcome<PublisherDtls> addAndUpdatePublisher(PublisherDtls publisherDtls) {
		ServiceOutcome<PublisherDtls> soc = new ServiceOutcome<PublisherDtls>();
		PublisherDtls publisherDtl = new PublisherDtls();
		User user = SecurityHelper.getCurrentUser();
		Random rand = new Random();
		try {
//			publisherRepository
			Publisher publisherData = Optional.ofNullable(publisherDtls.getPublisherVO().getPublisherId())
			        .flatMap(publisherRepository::findById)
			        .map(existingPublisher->{
			        	BeanUtils.copyProperties(publisherDtls.getPublisherVO(), existingPublisher);
			        	existingPublisher.setLastUpdatedBy(user);
			        	existingPublisher.setLastUpdatedOn(new Date());
			        	return existingPublisher;
			        }).orElseGet(()->{
			        	Publisher newPublisher = new Publisher();
			        	BeanUtils.copyProperties(publisherDtls.getPublisherVO(), newPublisher);
			        	String pubCode = "PUB_" + rand.ints(48, 100)
  				        .filter(num -> (num < 58 || num > 64) && (num < 91 || num > 96))
  				        .limit(6)
  				        .mapToObj(c -> (char) c)
  				        .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
  				        .toString();
			        	newPublisher.setPublisherCode(pubCode);
			        	newPublisher.setCreatedBy(user);
			        	newPublisher.setCreatedOn(new Date());
			        	return newPublisher;
			        });
			
			publisherData.setIsActive(true);
			publisherRepository.save(publisherData);
			
			soc.setMessage(Optional.ofNullable(publisherDtls.getPublisherVO().getPublisherId()).isPresent() ? "Publisher Updated" : "Publisher Added");
			soc.setOutcome(true);
		} catch (Exception e) {
			log.error("Exception occured in addAndUpdatePublisher method in MasterServiceImpl-->", e);
			soc.setMessage("Unable to process");
			soc.setOutcome(false);
		}
		return soc;
	}

	@Override
	public ServiceOutcome<PublisherDtls> getPublisherByPublisherCode(String publisherCode) {
		ServiceOutcome<PublisherDtls> soc = new ServiceOutcome<PublisherDtls>();
		PublisherDtls publisherDtl = new PublisherDtls();
		PublisherVO publisherVO = new PublisherVO();
		try {
			Optional<Publisher> findByPublisherCode = publisherRepository.findByPublisherCode(publisherCode);
			
			if(findByPublisherCode.isPresent()) {
				BeanUtils.copyProperties(findByPublisherCode.get(), publisherVO);
				publisherDtl.setPublisherVO(publisherVO);
			}
			
			soc.setData(publisherDtl);
			soc.setMessage("success");
			soc.setOutcome(true);
		} catch (Exception e) {
			log.error("Exception occured in getPublisherByPublisherCode method in MasterServiceImpl-->", e);
			soc.setMessage("error");
			soc.setOutcome(false);
		}
		return soc;
	}

	@Override
	@Transactional
	public ServiceOutcome<BookDtls> addAndUpdateBook(BookDtls bookDtls) {
		ServiceOutcome<BookDtls> soc = new ServiceOutcome<BookDtls>();
		PublisherDtls publisherDtl = new PublisherDtls();
		User user = SecurityHelper.getCurrentUser();
		Random rand = new Random();
		SimpleDateFormat adjustedFormat = new SimpleDateFormat("dd/MM/yyyy");
		try {
 
			BookCatalog bookCatData = Optional.ofNullable(bookDtls.getBookCatalogVO().getBookCatalogId())
			        .flatMap(bookCatalogRepository::findById)
			        .map(existingBookCatalog->{
			        	BeanUtils.copyProperties(bookDtls.getBookCatalogVO(), existingBookCatalog);
			        	existingBookCatalog.setLastUpdatedBy(user);
			        	existingBookCatalog.setLastUpdatedOn(new Date());
			        	return existingBookCatalog;
			        }).orElseGet(()->{
			        	BookCatalog bookcatalog = new BookCatalog();
			        	BeanUtils.copyProperties(bookDtls.getBookCatalogVO(), bookcatalog);
			        	String bookCatagoryCode = "BOOKCAT_" + rand.ints(48, 100)
				        .filter(num -> (num < 58 || num > 64) && (num < 91 || num > 96))
				        .limit(6)
				        .mapToObj(c -> (char) c)
				        .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
				        .toString();
			        	bookcatalog.setBookCatalogCode(bookCatagoryCode);
			        	bookcatalog.setCreatedBy(user);
			        	bookcatalog.setCreatedOn(new Date());
			        	return bookcatalog;
			        });
			bookCatData.setPublishDate(adjustedFormat.parse(bookDtls.getBookCatalogVO().getPublishDate().trim()));
			bookCatData.setPurchaseDate(adjustedFormat.parse(bookDtls.getBookCatalogVO().getPurchaseDate().trim()));
			bookCatData.setAuthorId(Optional.ofNullable(bookDtls.getBookCatalogVO().getAuthorId().getAuthorId()).isPresent() ? authorRepo.findById(bookDtls.getBookCatalogVO().getAuthorId().getAuthorId()).get() : null);
			bookCatData.setSubCategoryId(Optional.ofNullable(bookDtls.getBookCatalogVO().getSubCategoryId().getSubCategoryId()).isPresent() ? subCategoryRepository.findById(bookDtls.getBookCatalogVO().getSubCategoryId().getSubCategoryId()).get() : null);
			bookCatData.setLibId(Optional.ofNullable(bookDtls.getBookCatalogVO().getLibId().getLibId()).isPresent() ? libRepository.findById(bookDtls.getBookCatalogVO().getLibId().getLibId()).get() : null);
			bookCatData.setPublisherId(Optional.ofNullable(bookDtls.getBookCatalogVO().getPublisherId().getPublisherId()).isPresent() ? publisherRepository.findById(bookDtls.getBookCatalogVO().getPublisherId().getPublisherId()).get() : null);
			bookCatData.setIsActive(true);
			BookCatalog saveBookCatalog = bookCatalogRepository.save(bookCatData);
			
			List<Long> bookIds = bookRepository.findByBookCatalogIdAndIsActive(saveBookCatalog.getBookCatalogId(), true).stream().map(Book::getBookId).collect(Collectors.toList());
			List<Long> existingBookIds = new ArrayList<>();
//			List<Long> 
			bookDtls.getBookVOList().forEach(book->{
				if(!Optional.ofNullable(book.getBookUkNo()).isPresent()) {
					return ;
				}
				
				if(Optional.ofNullable(book.getBookId()).isPresent() && bookIds.contains(book.getBookId())) {
					Optional<Book> findById = bookRepository.findById(book.getBookId());
					if(findById.isPresent()) {
						BeanUtils.copyProperties(book, findById.get());
						findById.get().setRackId(Optional.ofNullable(book.getRackId().getRackId()).isPresent() ? rackRepository.findById(book.getRackId().getRackId()).get() : null);
						findById.get().setShelfId(Optional.ofNullable(book.getShelfId().getShelfId()).isPresent() ? shelfRepository.findById(book.getShelfId().getShelfId()).get() : null);
						findById.get().setBookCatalogId(saveBookCatalog.getBookCatalogId());
						findById.get().setLastUpdatedBy(user);
						findById.get().setLastUpdatedOn(new Date());
						findById.get().setIsActive(true);
						bookRepository.save(findById.get());
						existingBookIds.add(book.getBookId());
					}
				}else {
					Book newBook = new Book();
					BeanUtils.copyProperties(book, newBook);
					newBook.setRackId(Optional.ofNullable(book.getRackId().getRackId()).isPresent() ? rackRepository.findById(book.getRackId().getRackId()).get() : null);
					newBook.setShelfId(Optional.ofNullable(book.getShelfId().getShelfId()).isPresent() ? shelfRepository.findById(book.getShelfId().getShelfId()).get() : null);
					newBook.setBookCatalogId(saveBookCatalog.getBookCatalogId());
					newBook.setCreatedBy(user);
					newBook.setCreatedOn(new Date());
					newBook.setIsActive(true);
					bookRepository.save(newBook);
				}
				
			});
			
			bookIds.removeAll(existingBookIds);
			if(existingBookIds.size() > 0) {
				bookIds.forEach(id->{
					Optional<Book> findById = bookRepository.findById(id);
					if(findById.isPresent()) {
						findById.get().setIsActive(false);
						bookRepository.save(findById.get());
					}
				});
			}
			
			soc.setMessage(Optional.ofNullable(bookDtls.getBookCatalogVO().getBookCatalogId()).isPresent() ? "Book Updated" : "Book Added");
			soc.setOutcome(true);
		} catch (Exception e) {
			log.error("Exception occured in addAndUpdateBook method in MasterServiceImpl-->", e);
			soc.setMessage("Unable to process");
			soc.setOutcome(false);
			TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
		}
		return soc;
	}
	
	@Override
	public ServiceOutcome<List<Gender>> getGenderList() {
		ServiceOutcome<List<Gender>> soc= new ServiceOutcome<>();
		List<Gender> gndr= new ArrayList<>();
		try {
			gndr = genderRepository.findAll();
			soc.setData(gndr);			
		} catch (Exception e) {
			e.printStackTrace();
			soc.setData(null);
		}
		return soc;
	}

	@Override
	public ServiceOutcome<Author> saveAuthorDetails(Author author) {
		ServiceOutcome<Author> soc= new ServiceOutcome<>();
		User user= SecurityHelper.getCurrentUser();
		try {
			Author authr= null;
			if(author.getAuthorId()!=null) {
				authr= authorRepo.findById(author.getAuthorId()).get();
				soc.setMessage("Author Details Updated successfully.");
				authr.setLastUpdatedBy(user);
				authr.setLastUpdatedOn(new Date());
			}
			else {
				authr = new Author(); 
				soc.setMessage("Author Details saved successfully.");					
				user.setCreatedBy(user);
				user.setCreatedOn(new Date());
			}
			
			authr.setAuthorName(author.getAuthorName());
			authr.setGender(
				    author.getGenderId() != null ? genderRepository.findByGenderId(author.getGenderId()) :
				        null
				       
				);
			authr.setAddress(author.getAddress());
			authr.setMail(author.getMail());
			authr.setMobileNumber(author.getMobileNumber());
			String random= RandomNumberGenerate.getRandomUniqueCode(8);
			authr.setAuthorCode(random);
			authr.setIsActive(true);
			authorRepo.save(authr);
			soc.setData(authr);
			soc.setOutcome(true);
		} catch (Exception e) {
			e.printStackTrace();
			soc.setData(null);
			soc.setOutcome(false);
			soc.setMessage("could not save data");
		}
		return soc;
	}

	@Override
	public ServiceOutcome<Author> editAuthorData(Long authorId) {
		ServiceOutcome<Author> soc= new ServiceOutcome<>();
		try {
			if(authorId!=null) {
			Author author= authorRepo.findById(authorId).get();
			soc.setData(author);
			soc.setOutcome(true);
			soc.setMessage("Success");
		}
		}catch (Exception e) {
			log.error("Exception occured in masterServiceImpl -> in editAuthorData()"+e);
			soc.setData(null);
			soc.setMessage("Error");
			soc.setOutcome(false);
		}
		return soc;
	}

	@Override
	public ServiceOutcome<List<Author>> getAuthorList() {
		ServiceOutcome<List<Author>> srvc = new ServiceOutcome<>();
		try {
			List<Author> author = new ArrayList<>();
			author = authorRepo.findAll();
			srvc.setData(author);
			srvc.setOutcome(true);
		} catch (Exception e) {
			log.error("Exception occured in getAuthorList()  Method in MasterServiceImpl-->", e);				
			srvc.setOutcome(false);
		}
		return srvc;
	}
	
	
	@Override
	public ServiceOutcome<Author> checkActiveInactiveAuthor(Long authorId) {
		ServiceOutcome<Author> soc= new ServiceOutcome<>();	
		Author author=null;
		try {
			author=authorRepo.findById(authorId).get();
			author.setIsActive(author.getIsActive()? false:true);
			authorRepo.save(author);
			soc.setData(author);			
			soc.setOutcome(true);
			soc.setMessage(author.getIsActive() ? "Activated" : "Deactivated");
		} catch (Exception e) {
			log.error("Exception occured in masterServiceImpl-> in activeInactiveBanks()",e);
			soc.setData(null);
			soc.setOutcome(false);
			soc.setMessage("Error");
		}
		return soc;
	}

	@Override
	public ServiceOutcome<Librarian> saveLibrarianDetails(Librarian librarian) {
		ServiceOutcome<Librarian> soc= new ServiceOutcome<>();
		User user= SecurityHelper.getCurrentUser();
		try {
			Librarian libran= null;
			if(librarian.getLibrarianId() !=null) {
				libran= librarianRepo.findById(librarian.getLibrarianId()).get();
				soc.setMessage("Librarian Details Updated successfully.");
				libran.setLastUpdatedBy(user);
				libran.setLastUpdatedOn(new Date());
			}
			else {
				libran = new Librarian(); 
				soc.setMessage("Librarian Details saved successfully.");					
				user.setCreatedBy(user);
				user.setCreatedOn(new Date());
			}
			
			libran.setLibrarianName(librarian.getLibrarianName()); 			
			libran.setGender(librarian.getGenderId() != null ? genderRepository.findByGenderId(librarian.getGenderId()) : null);				       				
			libran.setLibrary(librarian.getLibId() != null ? libRepository.findById(librarian.getLibId()).get() :null);
			libran.setLibrarianAddress(librarian.getLibrarianAddress());
			libran.setEmail(librarian.getEmail());
			libran.setMobile(librarian.getMobile());
			String random= RandomNumberGenerate.getRandomUniqueCode(8);
			libran.setLibrarianCode(random);
			libran.setIsActive(true);
			librarianRepo.save(libran);
			soc.setData(libran);
			soc.setOutcome(true);
		} catch (Exception e) {
			e.printStackTrace();
			soc.setData(null);
			soc.setOutcome(false);
			soc.setMessage("could not save data");
		}
		return soc;
	}

	@Override
	public ServiceOutcome<List<Library>> getLibraryList() {
		ServiceOutcome<List<Library>> soc= new ServiceOutcome<>();
		try {
			List<Library> library = new ArrayList<>();			
			library = libRepository.findAll();
			soc.setData(library);
			soc.setOutcome(true);
		} catch (Exception e) {
			log.error("Exception occured in getLibraryList()  Method in MasterServiceImpl-->", e);				
			soc.setOutcome(false);
		}
		return soc;
	}

	@Override
	public ServiceOutcome<List<Librarian>> getLibrarianDetailsList() {
		ServiceOutcome<List<Librarian>> srvc = new ServiceOutcome<>();
		try {
			List<Librarian> librn = new ArrayList<>();
			librn = librarianRepo.findAll();
			srvc.setData(librn);
			srvc.setOutcome(true);
		} catch (Exception e) {
			log.error("Exception occured in getLibrarianDetailsList()  Method in MasterServiceImpl-->", e);				
			srvc.setOutcome(false);
		}
		return srvc;
	}

	@Override
	public ServiceOutcome<Librarian> editLibrarianData(Long librarianId) {
		ServiceOutcome<Librarian> soc= new ServiceOutcome<>();
		try {
			if(librarianId!=null) {
			Librarian librian= librarianRepo.findById(librarianId).get();
			soc.setData(librian);
			soc.setOutcome(true);
			soc.setMessage("Success");
		} 
		}catch (Exception e) {
			log.error("Exception occured in masterServiceImpl -> in editLibrarianData()"+e);
			soc.setData(null);
			soc.setMessage("Error");
			soc.setOutcome(false);
		}
		return soc;
	}

	@Override
	public ServiceOutcome<Librarian> checkActiveInactiveLibrarian(Long librarianId) {
		ServiceOutcome<Librarian> soc= new ServiceOutcome<>();	
		Librarian librarian=null;
		try {
			librarian=librarianRepo.findById(librarianId).get();
			librarian.setIsActive(librarian.getIsActive()? false:true);
			librarianRepo.save(librarian);
			soc.setData(librarian);			
			soc.setOutcome(true);
			soc.setMessage(librarian.getIsActive() ? "Activated" : "Deactivated");
		} catch (Exception e) {
			log.error("Exception occured in masterServiceImpl-> in activeInactiveBanks()",e);
			soc.setData(null);
			soc.setOutcome(false);
			soc.setMessage("Error");
		}
		return soc;
	}

	@Override
	public ServiceOutcome<BookDtls> getBookCatalogByCatalogCode(String catalogCode) {
		ServiceOutcome<BookDtls> soc = new ServiceOutcome<BookDtls>();
		BookDtls bookDtls = new BookDtls();
		BookCatalogVO bookCatalogVO = new BookCatalogVO();
		List<BookVO> bookVOList = new ArrayList<>();
		SimpleDateFormat dateTimeFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		try {
			
			Optional<BookCatalog> findByBookCatalogCode = bookCatalogRepository.findByBookCatalogCode(catalogCode);
			
			if(findByBookCatalogCode.isPresent()) {
				BeanUtils.copyProperties(findByBookCatalogCode.get(), bookCatalogVO);
				Date publishDate = dateTimeFormat.parse(findByBookCatalogCode.get().getPublishDate().toString());
				Date purchaseDate = dateTimeFormat.parse(findByBookCatalogCode.get().getPurchaseDate().toString());
				bookCatalogVO.setPublishDate(dateFormat.format(publishDate));
				bookCatalogVO.setPurchaseDate(dateFormat.format(purchaseDate));
				bookDtls.setBookCatalogVO(bookCatalogVO);
				List<Book> findByBookCatalogId = bookRepository.findByBookCatalogIdAndIsActive(findByBookCatalogCode.get().getBookCatalogId(), true);
				if(findByBookCatalogId.size() > 0) {
					findByBookCatalogId.forEach(existingBook->{
						BookVO existBookVO = new BookVO();
						BeanUtils.copyProperties(existingBook, existBookVO);
						bookVOList.add(existBookVO);
					});
				}
			}
			bookDtls.setBookCatalogVO(bookCatalogVO);
			bookDtls.setBookVOList(bookVOList);
			
			soc.setData(bookDtls);
			soc.setMessage("Book Details fetch Succesfully");
			soc.setOutcome(true);
			
		} catch (Exception e) {
			log.error("Exception occured in getBookCatalogByCatalogCode method in MasterServiceImpl-->", e);
			soc.setMessage("Unable to process");
			soc.setOutcome(false);
		}
		return soc;
	}
	
	
  	
}
